// <auto-generated />
using CandyReview.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CandyReview.Migrations
{
    [DbContext(typeof(CandyContext))]
    [Migration("20200227160715_UpdateSeedData")]
    partial class UpdateSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CandyReview.Models.ProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Marshmallow",
                            Image = "peeps.jpg",
                            Name = "Peeps"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Sour",
                            Image = "sourpatchkids.jpg",
                            Name = "Sour Patch Kids"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Chocolate",
                            Image = "hersheykisses.jpg",
                            Name = "Hershey's Kisses"
                        });
                });

            modelBuilder.Entity("CandyReview.Models.ReviewModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Reviewer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Why wouldn't you just eat a marshmallow..? Peeps make for a very fun s'more though.",
                            Date = "2/26/20",
                            ProductId = 1,
                            Rating = 5,
                            Reviewer = "Josh"
                        },
                        new
                        {
                            Id = 2,
                            Content = "God awful. Please do not spend money on these.",
                            Date = "2/26/20",
                            ProductId = 1,
                            Rating = 1,
                            Reviewer = "Rhianna"
                        },
                        new
                        {
                            Id = 3,
                            Content = "They are the perfect combination of chewy and sour",
                            Date = "2/26/20",
                            ProductId = 2,
                            Rating = 4,
                            Reviewer = "Tatyana"
                        },
                        new
                        {
                            Id = 4,
                            Content = "First, they're sour. Then, they're sweet.",
                            Date = "2/26/20",
                            ProductId = 2,
                            Rating = 5,
                            Reviewer = "Rob"
                        },
                        new
                        {
                            Id = 5,
                            Content = "I mean, it's chocolate. You can't really go wrong here.",
                            Date = "2/26/20",
                            ProductId = 3,
                            Rating = 4,
                            Reviewer = "Josh"
                        },
                        new
                        {
                            Id = 6,
                            Content = "I find myself accidentally eating the entire bag. Chocolate is always A+",
                            Date = "2/26/20",
                            ProductId = 3,
                            Rating = 5,
                            Reviewer = "Rhianna"
                        });
                });

            modelBuilder.Entity("CandyReview.Models.ReviewModel", b =>
                {
                    b.HasOne("CandyReview.Models.ProductModel", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
